// src/components/PaymentForm.js
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const PaymentForm = () => {
  const [userId, setUserId] = useState('');
  const [amount, setAmount] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!userId || !amount) {
      alert('Please enter user ID and amount');
      return;
    }

    setIsProcessing(true);
    try {
      // 1. Call backend to create the order and get orderId
      const response = await axios.post('http://localhost:6578/api/payments/create-order', {
        userId,
        amount,
      });

      const { orderId, paymentLink } = response.data;

      // 2. Open Razorpay checkout window with the orderId received from backend
      const options = {
        key: 'Your razorpay key', // Replace with your Razorpay key
        amount: (amount * 100).toString(), // Amount in paise (e.g., amount = 1000 means 10 INR)
        currency: 'INR',
        name: 'Your App',
        description: 'Payment for order',
        image: 'https://your-logo-url.com', // Optional logo URL
        order_id: orderId,
        handler: async function (response) {
          // 3. On successful payment, send payment details to backend to update status
          const { razorpay_payment_id, razorpay_order_id, razorpay_signature } = response;

          try {
            // 4. Check the payment status
            let status = 'FAILURE'; // Default to FAILURE if not successful
            if (razorpay_signature) {
              status = 'SUCCESS'; // Mark as SUCCESS if the signature is present (indicating payment completion)
            }

            // Send the payment details to backend (paymentId, orderId, status)
            const updateResponse = await axios.post(
              'http://localhost:6578/api/payments/update-status',
              {
                paymentId: razorpay_payment_id, // Send the payment ID generated by Razorpay
                orderId: razorpay_order_id,     // Send the order ID created in the backend
                status: status,                 // Send the payment status (SUCCESS or FAILURE)
              }
            );

            // 5. Redirect to success page after updating the payment status in the backend
            navigate(`/payment-success/${razorpay_payment_id}`);
          } catch (error) {
            console.error('Error updating payment status:', error);
            alert('Error updating payment status. Please try again.');
          }
        },
        prefill: {
          name: 'Customer Name',
          email: 'customer@example.com',
        },
        theme: {
          color: '#F37254',
        },
      };

      const rzp1 = new window.Razorpay(options);
      rzp1.open();
    } catch (error) {
      alert('Error creating payment order');
      console.error(error);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="payment-form">
      <h2>Payment Form</h2>
      <form onSubmit={handleSubmit}>
        <label>
          User ID:
          <input
            type="text"
            value={userId}
            onChange={(e) => setUserId(e.target.value)}
            required
          />
        </label>
        <br />
        <label>
          Amount:
          <input
            type="text"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            required
          />
        </label>
        <br />
        <button type="submit" disabled={isProcessing}>
          {isProcessing ? 'Processing...' : 'Pay Now'}
        </button>
      </form>
    </div>
  );
};

export default PaymentForm;
